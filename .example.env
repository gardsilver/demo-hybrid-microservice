# Пример конфигурации.
# Перечислены все переменные, используемые в сервисе, и приведены подробные описания.


# ==== НАСТРОЙКИ МИКРОСЕРВИСА ====
# @see src/app/services/app.config.ts
SERVICE_PORT=
GRPC_HOST=
GRPC_PORT=
CORS_OPTIONS=


# ==== НАСТРОЙКИ ЛОГИРОВАНИЯ ====
# @see src/modules/logger/services/logger.config.ts

# LOGGER_FORMAT_RECORD может иметь одно из значений: 
#  - FULL      полный лог в формате json  @see src/modules/logger/formatters/record-encodes/full.formatter.ts
#  - SIMPLE    сжатый лог @see src/modules/logger/formatters/record-encodes/full.formatter.ts
#  - SHORT     максимально сжатый человеко читаемый вид. @see src/modules/logger/formatters/record-encodes/short.formatter.ts
#  - NULL      не выводить логи.
LOGGER_FORMAT_RECORD=FULL

# LOGGER_IGNORE_MODULES через разделитель ',' задаются значение 'module', для которых лог не должен писаться
LOGGER_IGNORE_MODULES=app

# LOGGER_LEVELS через разделитель ',' задаются значение 'level', для которых лог не должен писаться
# Возможные значения: [TRACE, DEBUG, INFO, WARN]. Если параметр не задан, то данный фильтр не применяется.
LOGGER_LEVELS=

# LOGGER_FORMAT_TIMESTAMP определяет формат вывода 'timestamp', если не задан будет использован: 'YYYY-MM-DDTHH:mm:ssZ'
# Примеры возможных форматов @see src/modules/date-timestamp/types/constants.ts
LOGGER_FORMAT_TIMESTAMP=

# LOGGER_STORE_FILE задает путь к файлу, куда будут дополнительно писаться логи.
# Логи будут писаться в файл только, если LOGGER_FORMAT_RECORD=SHORT
# Например: LOGGER_STORE_FILE=log.log
LOGGER_STORE_FILE=

# @see src/modules/logger/formatters/prune.config.ts

# LOGGER_PRUNE_ENABLED включает/отключает применение уменьшение объема логирования или нет.
# Данный параметр влияет только на усечение данных для LOGGER_FORMAT_RECORD=SHORT
# Может быть задан как
#  - no        (регистронезависимый) Не применяется 
#  - yes       (регистронезависимый) Лог будет обрезан до длины --default-- из настройки LOGGER_PRUNE_MAX_LENGTH_FIELDS 
#  - Любое другое значение будет интерпретировано, как имя поля из настройки LOGGER_PRUNE_MAX_LENGTH_FIELDS, для определения длины облезания лога. 
LOGGER_PRUNE_ENABLED=NO

#LOGGER_PRUNE_MAX_FIELDS определяет максимальное кол-во полей в IKeyValue
# Значение 0 отключает проверку.
LOGGER_PRUNE_MAX_FIELDS=

# LOGGER_PRUNE_MAX_DEPTH Определяет максимальную длину вложенности данных. 
# Задается как целое число. Например LOGGER_PRUNE_MAX_DEPTH=10
# Если не задано или определено как 0 или меньше - контроль вложенности не будет использован.
LOGGER_PRUNE_MAX_DEPTH=

# LOGGER_PRUNE_APPLY_FOR_FORMATS через разделитель ',' задает для какого форматера принять логику усечения объема логирования.
# Возможные значения @see LOGGER_FORMAT_RECORD
# Например можно задать как: FULL,SHORT
LOGGER_PRUNE_APPLY_FOR_FORMATS=

# LOGGER_PRUNE_MAX_LENGTH_FIELDS через разделитель ',' задаются имена полей с указанием до какой длины уменьшать поле (через разделитель '=').
# Применяется для строк и массивов. Возможно указание глобальных лимитов. Значения 0 или меньше - отключает применение для указанного поля.
# Например: LOGGER_PRUNE_MAX_LENGTH_FIELDS=--array--=2,--default--=40,fileBody=20
LOGGER_PRUNE_MAX_LENGTH_FIELDS=


# ==== НАСТРОЙКИ PROMETHEUS ====
# @see src/modules/prometheus/services/prometheus.config.ts
APPLICATION_NAME=
MICROSERVICE_NAME=
MICROSERVICE_VERSION=


# ==== НАСТРОЙКИ ПЛАВНОГО ЗАВЕРШЕНИЯ ПРИЛОЖЕНИЯ ====
# @see src/modules/graceful-shutdown/services/graceful-shutdown.config.ts

# GRACEFUL_SHUTDOWN_ENABLED если 'no', то не будет запускать процесс плавного завершения приложения. 
GRACEFUL_SHUTDOWN_ENABLED=no

# GRACEFUL_SHUTDOWN_TIMEOUT_ON_BEFORE_DESTROY в миллисекундах.
# Задает период ожидания завершения обработчиков события GracefulShutdownEvents.BEFORE_DESTROY
# Значение по умолчанию: 10_000
GRACEFUL_SHUTDOWN_TIMEOUT_ON_BEFORE_DESTROY=

# GRACEFUL_SHUTDOWN_TIMEOUT_ON_DESTROY в миллисекундах
# Задает период ожидания завершения активных процессов.
# Значение по умолчанию: 30_000
GRACEFUL_SHUTDOWN_TIMEOUT_ON_DESTROY=

# GRACEFUL_SHUTDOWN_TIMEOUT_ON_AFTER_DESTROY в миллисекундах.
# Задает период ожидания завершения обработчиков события GracefulShutdownEvents.AFTER_DESTROY.
# Значение по умолчанию: 10_000
GRACEFUL_SHUTDOWN_TIMEOUT_ON_AFTER_DESTROY=

# GRACEFUL_SHUTDOWN_GRACE_PERIOD в миллисекундах.
# Задает период ожидания перед завершением работы приложения.
# Нужен, что бы сборщики логов и метрик успели собрать информацию о процессе завершения приложения.
# Значение по умолчанию: 15_000
GRACEFUL_SHUTDOWN_GRACE_PERIOD=

# GRACEFUL_SHUTDOWN_DESTROY_SIGNAL сигнал запускающий процесс плавного завершения приложения.
# Значение по умолчанию: SIGTERM
GRACEFUL_SHUTDOWN_DESTROY_SIGNAL=


# ==== НАСТРОЙКИ ПОДКЛЮЧЕНИЯ К БД PG ====
DATABASE_MIGRATIONS_ENABLED=
DATABASE_MIGRATIONS_TABLE=
DATABASE_HOST=
DATABASE_PORT=
DATABASE_DIALECT=
DATABASE_NAME=
DATABASE_PREFIX=
DATABASE_SCHEMA=
DATABASE_USER=
DATABASE_PASSWORD=
DATABASE_LOGGING_ENABLED=

# ==== НАСТРОЙКИ HttpClientModule ====
# HTTP_CLIENT_RETRY_ENABLED если 'no', то HTTP-клиент не будет делать переотправку запроса. 
# Нужно будет явно указать в опциях метода 'HttpClientService.request' или при подключении модуля о необходимости повторной переотправки запроса.
HTTP_CLIENT_RETRY_ENABLED=no
# HTTP_CLIENT_REQUEST_TIMEOUT в mc timeout запроса. 
HTTP_CLIENT_REQUEST_TIMEOUT=10000
# HTTP_CLIENT_RETRY_TIMEOUT в mc timeout процесса переотправки.
HTTP_CLIENT_RETRY_TIMEOUT=10000
# HTTP_CLIENT_RETRY_MAX_COUNT максимальное кол-во переотправок.
HTTP_CLIENT_RETRY_MAX_COUNT=10000
# HTTP_CLIENT_RETRY_DELAY в mc пауза между отправками повторных запросов.
HTTP_CLIENT_RETRY_DELAY=10000
# HTTP_CLIENT_RETRY_STATUS_CODES массив полученных статусов ответа, для которых необходимо отправить повторный запрос.
HTTP_CLIENT_RETRY_STATUS_CODES=408,502,503,504,ECONNABORTED,ETIMEDOUT,ECONNREFUSED,ECONNRESET

# ==== НАСТРОЙКИ GrpcClientModule ====
# GRPC_CLIENT_RETRY_ENABLED если 'no', то gRPC-клиент не будет делать переотправку запроса. 
# Нужно будет явно указать в опциях метода 'GrpcClientService.request' или при подключении модуля о необходимости повторной переотправки запроса.
GRPC_CLIENT_RETRY_ENABLED=no
# GRPC_CLIENT_REQUEST_TIMEOUT в mc timeout запроса. 
GRPC_CLIENT_REQUEST_TIMEOUT=10000
# GRPC_CLIENT_RETRY_TIMEOUT в mc timeout процесса переотправки.
GRPC_CLIENT_RETRY_TIMEOUT=10000
# GRPC_CLIENT_RETRY_MAX_COUNT максимальное кол-во переотправок.
GRPC_CLIENT_RETRY_MAX_COUNT=10000
# GRPC_CLIENT_RETRY_DELAY в mc пауза между отправками повторных запросов.
GRPC_CLIENT_RETRY_DELAY=10000
# GRPC_CLIENT_RETRY_STATUS_CODES массив полученных статусов ответа, для которых необходимо отправить повторный запрос.
GRPC_CLIENT_RETRY_STATUS_CODES=4,14,timeout

# ==== НАСТРОЙКИ CacheManagerModule ====
REDIS_CACHE_MANAGER_TTL=
REDIS_CACHE_MANAGER_HOST=
REDIS_CACHE_MANAGER_PORT=
REDIS_CACHE_MANAGER_MAX_DELAY_BEFORE_RECONNECT=
REDIS_CACHE_MANAGER_COUNT_FOR_RESET_RECONNECT_STRATEGY=
